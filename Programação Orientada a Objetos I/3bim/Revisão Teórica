#Revisão Teórica de ASP.NET CORE

Para começar precisamos entender o que o padrão `MVC` significa.

M -> Model 
V -> View
C -> Controller

Este modelo foi criado para aplicar um dos principios mais famosos entre os programadores que é o `DRY`(Don't Repeat Yourself - 
Não se repita).

Vamos tentar entender o que cada parte do MVC significa:

###### Model

Os modelos são as classes da sua aplicação, exatamente como nós fizemos várias vezes na aula de Análise com o Venício.

https://aec67204-a-62cb3a1a-s-sites.googlegroups.com/site/mindbitufrpe/diagramas/diagrama-de-classes/Class%20Diagram0.png?attachauth=ANoY7cpuI_-Xxm-Z8iwFRoLBzhh978iJYRbpv6An7wYvB-zJROrfgsnKpd9spaQSwtPiqOw6gXXGhKOROvrX1CsoK4VII_yO91zr1KsghNrOQFnJrksCluUN-py0L_8R_TNFFevOBQEaAZh01ABBoTFhk7ezwuzZPaHGWNp-39oULhYA8QgaE4RQ30NPSLfnqTB7SaNOi5wyZQjDx8J7-y0Z0I9VGYFOZsZhgYbSL4f9vBT0fDfuTM9duHEbOoNRW_EJSM63RJ81&attredirects=0

Nestes modelos você precisa definir todos os atributos que você vai precisar em cada classe.

###### View

View é o layout da aplicação, ou seja, o que o cliente vai "ver" na telinha :]

É possivel trazer uma variavel ou atributo criado dentro do seu modelo para mostrar pro cliente e sempre que você trocar no seu modelo
isto vai automaticamente trocar na sua view também, ou seja, uma aplicação dinâmica.
Mas isto só é possivel através do `Razor` (View Engine) que deixa você usar código em C# dentro do "Html" da View.

---------------Seria bacanas umas imagens de exemplos de view aqui.

Dentro da pasta View da sua aplicação sempre vai ter uma pasta `Shared`.
É nesta Pasta que o principio `DRY` vem atona pela primeira vez. Nesta existem Views que vão aparecer em todas as outras Views. Q? COMO ASSIM?

Sabe a navbar do seu site maneiro? Em vezes de você precisar copiar e colar toda vez que você criar uma nova pasta e ficar se repetindo, você
pode colocar no arquivo `_Layout.cshtml` o seu navbar estiloso e então todas as views da sua aplicação vão mostrar a sua navbar sem precisar 
ficar se repetindo e com isso diminuindo a quantidade de código e salvando tempo. ;]

###### Controller

Controllers são controles que vão fazer todo o trabalho duro da aplicação, ou seja, este controllers são os responsaveis por saber qual View
pertence a qual modelo e para onde vai os dados recebidos pelo cliente ou pelo servidor.

------- Foto do padrão de MVC aqui.



> Ainda não terminei.




